---
layout: post
title: 'Fastify로 NodeJS 백엔드 갈아타기 - (1) Plugins'
date: 2024-11-11 19:01:00 +0900
categories: javascript nodejs fastify typescript
published: false
---

## 안녕! Fastify 잘가! Express

개발로 밥벌어 먹으면서 참 고마운 것이 있다. 바로 무료로 사용할 수 있는 오픈소스 라이브러리들이다. 그중에서도 NodeJS의 백엔드 프레임워크인 [Express](https://expressjs.com/)는 지난 10여년간 NodeJS로 백엔드를 개발할때 거의 필수적으로 사용해왔다. 구조가 단순하고 빠르게 개발할 수 있으며 검증된 다양한 미들웨어들로 경험이 누적되다보니 굳이 다른 프레임워크를 사용할 이유가 없었다.
하지만, 그동안 Express를 대채할 많은 프레임워크들이 출시되었으나 Express의 발전은 그에 반해 너무 지지부진했다고 생각한다. 최근에 회사에서 파일럿 프로젝트를 시작하며 새로운 프레임워크를 선택할 기회가 생겼고, 이 기회를 통해 Express를 대체할 새로운 프레임워크를 찾아보게 되었다.
Express보다 현대적인 구조와 훨씬 더 빠른 Benchmark 성능을 제시하는 프레임워크들이 많았지만 이번에는 [Fastify](https://fastify.dev/)를 사용해보기로 결심하고 시작하게 되었고, 시작한지 이틀만에 필요한 기능구현은 거의 끝이났다.
결론적으로, DX(Developer Experience)가 훨씬 좋다고 느꼈고, 이번 경험을 통해 Fastify가 가진 특별한 점과 개발과정을 소개해 보고자 한다.

## 시작

일단 시작은 "Hello World"가 국룰 아니겠는가? 공식 사이트의 [Getting Started](https://fastify.dev/docs/latest/Guides/Getting-Started/) 에서 처음으로 소개하는 예제를 Typescript 환경으로 변형해서 시작 프로젝트를 생성해 보겠다.

```typescript
// src/routes/helloworld.ts

import {
    fastify,
    FastifyInstance,
    FastifyRequest,
    FastifyReply,
} from 'fastify';

// 서버 인스턴스 생성 시 타입 정의
const server: FastifyInstance = fastify({
    logger: true,
});

// 기본 라우트 핸들러에 타입 추가
server.get('/', async (request: FastifyRequest, reply: FastifyReply) => {
    return { hello: 'world' };
});

// 서버 시작 함수
const start = async (): Promise<void> => {
    try {
        const address = await server.listen({
            port: 3000,
            host: '0.0.0.0', // 모든 네트워크 인터페이스에서 수신
        });
        console.log(`Server is listening at ${address}`);
    } catch (err) {
        server.log.error(err);
        process.exit(1);
    }
};
```

코드상으로 ExpressJS와 크게 다를바 없어보인다.
하지만, 이제부터 시작이다.

## 모든것은 플러그인이다.

> As with JavaScript, where everything is an object, with Fastify everything is a plugin.

위의 코드를 살짝 비틀어 보겠다. server 인스턴스를 생성하고 시작하는 사이에 있는 "/"에 대한 GET 요청을 별도의 파일로 분리해 보겠다.

```typescript
// src/routes/helloworld.ts

import {
    FastifyInstance,
    FastifyPluginOptions,
    FastifyRequest,
    FastifyReply,
} from 'fastify';

/**
 * Encapsulates the routes
 * @param {FastifyInstance} fastify  Encapsulated Fastify Instance
 * @param {FastifyPluginOptions} options plugin options, refer to https://fastify.dev/docs/latest/Reference/Plugins/#plugin-options
 */
async function helloworld(
    fastify: FastifyInstance,
    options: FastifyPluginOptions
): Promise<void> {
    fastify.get('/', async (request: FastifyRequest, reply: FastifyReply) => {
        return { hello: 'world' };
    });
}

// ESM
export default helloworld;
```

이제 server.ts 를 아래와 같이 리팩토링 하자.

```typescript
// src/server.ts

import { fastify, FastifyInstance } from 'fastify';
import helloworld from './routes/helloworld';

// 서버 인스턴스 생성 시 타입 정의
const server: FastifyInstance = fastify({
    logger: true,
});

server.register(helloworld);

// 서버 시작 함수
const start = async (): Promise<void> => {
    try {
        const address = await server.listen({
            port: 3000,
            host: '0.0.0.0', // 모든 네트워크 인터페이스에서 수신
        });
        console.log(`Server is listening at ${address}`);
    } catch (err) {
        server.log.error(err);
        process.exit(1);
    }
};

// 서버 시작
start();
```

핵심은 plugins 와 register API 이다. 이 API는 당신의 어플리케이션에서 비동기 부트스트래핑을 매우 간략하게 처리해주는 Fastify 프레임워크의 핵심이다.

일반적으로 데이터베이스 연결과 같은 기능은 서버가 연결을 수락하기전에 준비가 되어야 한다. 기존에는 이런것들을 콜백함수나 프로미스같은 복잡한 로직으로 처리해야만 했다.
Fastify는 이러한 과정을 깔끔하고 최소한의 절차로 처리할 수 있게 해준다.

## MongoDB 예제

```bash
npm i fastify-plugin @fastify/mongodb
```

mongodb외에도, Fastify Site의 [Ecosystem](https://fastify.dev/ecosystem/)메뉴에서 Fastify team이 제공하는 core plugins와 수많은 community plugins를 확인할 수 있다.

```typescript
// src/plugins/db-connector.ts

import fastifyPlugin from 'fastify-plugin';
import fastifyMongo from '@fastify/mongodb';
import { FastifyInstance, FastifyPluginOptions } from 'fastify';

/**
 * Plugin to connect to MongoDB
 * @param {FastifyInstance} fastify Fastify instance
 * @param {FastifyPluginOptions} options Plugin options
 */
async function dbConnector(
    fastify: FastifyInstance,
    options: FastifyPluginOptions
): Promise<void> {
    fastify.register(fastifyMongo, {
        url: 'mongodb://localhost:27017/test_database',
    });
}

// Wrapping a plugin function with fastify-plugin exposes the decorators
// and hooks, declared inside the plugin to the parent scope.
export default fastifyPlugin(dbConnector);

// src/routes/animals.ts

import {
    FastifyInstance,
    FastifyPluginOptions,
    FastifyRequest,
    FastifyReply,
} from 'fastify';
import { Collection, Document } from 'mongodb';

interface AnimalDocument {
    animal: string;
    _id?: string;
}

/**
 * A plugin that provides encapsulated routes
 * @param {FastifyInstance} fastify encapsulated fastify instance
 * @param {FastifyPluginOptions} options plugin options, refer to https://fastify.dev/docs/latest/Reference/Plugins/#plugin-options
 */
async function animals(
    fastify: FastifyInstance,
    options: FastifyPluginOptions
): Promise<void> {
    // Type assertion for MongoDB collection
    const collection: Collection<AnimalDocument> =
        fastify.mongo.db.collection('animals');

    fastify.get(
        '/animals',
        async (request: FastifyRequest, reply: FastifyReply) => {
            const result = await collection.find().toArray();
            if (result.length === 0) {
                throw new Error('No documents found');
            }
            return result;
        }
    );
}

// ESM
export default animals;
```

각각 plugins 폴더와 routes 폴더에 파일을 생성하고 server.ts 에 추가한다.

```typescript
// src/server.ts

import { fastify, FastifyInstance } from 'fastify';
import helloworld from './routes/helloworld';
import animals from './routes/animals';
import dbConnector from './plugins/db-connector';

// 서버 인스턴스 생성 시 타입 정의
const server: FastifyInstance = fastify({
    logger: true,
});

server.register(dbConnector);
server.register(helloworld);
server.register(animals);

// 서버 시작 함수
const start = async (): Promise<void> => {
    try {
        const address = await server.listen({
            port: 3000,
            host: '0.0.0.0', // 모든 네트워크 인터페이스에서 수신
        });
        console.log(`Server is listening at ${address}`);
    } catch (err) {
        server.log.error(err);
        process.exit(1);
    }
};

// 서버 시작
start();
```

> http://localhost:3000/animals

미리 적당한 샘플데이터를 입력해 두었다면 다음과 같이 결과를 볼 수 있다.

```json
[
    {
        "_id": "6731e79bc2c4ae54b44854ba",
        "animal": "horse"
    },
    {
        "_id": "6731e7b9c2c4ae54b44854bb",
        "animal": "dogs"
    }
]
```

## 요약

지금까지 예제에서 단지 register API만 사용해서 routes도 등록하고, plugins도 등록했다.
이 방법은 plugins를 선언한 순서대로 로드한다. 이것은 코드를 읽고 쓰기 쉽게 유지해준다.
